LISTMEM TITLE 'Gather PDS Member Names and Create REXX Stems'
*-------------------------------------------------------------------*
* Function        : This program provides an external REXX function
*                   to place the PDS Member names into REXX Stem
*                   variables.
*
*                   The following REXX Stem variables are created :
*                   (a) PDS_MEMBER_NAME.   PDS Member Name
*
*
* Syntax          : rcode = LISTMEM(dataset,volser)
*
*                   DATASET
*                   The fully qualified PDS dataset name.
*
*                   VOLSER
*                   The volume serial number if the dataset is not
*                   cataloged (optional parameter).
*
*                   RCODE
*                   The return code from the LISTMEM function :
*                   0        : Function was successful
*                   2        : Dataset is migrated - recall it
*                   4        : Error accessing dataset or volume
*                              (a) Dataset does not exist
*                              (b) Dataset not on specified volume
*                              (c) Dataset not PDS
*                   8        : Parameter error
*                   eeeeiiii : Dynamic allocation error where
*                              'eeee' is the SVC 99 error code and
*                              'iiii' is the SVC 99 info code.
*
* Example         : /* REXX */
*
*                   rcode = LISTMEM('IBMUSER.CNTL','IPO1DL')
*                   if rcode <> 0 then exit
*                   i = 1
*                   do PDS_MEMBER_NAME.0
*                      say PDS_MEMBER_NAME.i
*                      i = i + 1
*                      end
*
*
* IBM Macros Used : MODID, STORAGE, LOAD, DELETE, LOCATE, OBTAIN,
*                   DYNALLOC, GET, CAMLST, OPEN, CLOSE, IECSDSL1,
*                   IRXEVALB, IRXEFPL, IRXSHVB, IRXARGTB, IEFZB4D0,
*                   IEFZB4D2
*
* Attributes      : Amode(24)
*                   Rmode(24)
*                   RENT
*                   REUS
*                   NOREFR
*                   AC(0)
*
* Register Usage  :
*
* R1  - Parms passed              : +0 ---> REXX EFPL
* R2  - EFPL
* R3  - EVALBLOCK
* R4  - Name buffer address
* R5  - Value buffer address
* R6  - ARGTABLE
* R7  -
* R8  - arg pointer / S99RB
* R9  - arg length / Directory block
* R10 - Branch and Link
* R11 - SHVBLOCK
* R12 - Base reg
* R13 - Workarea
*
*-------------------------------------------------------------------*
* (c) Scott Enterprise Consultancy Ltd
*-------------------------------------------------------------------*
* Changes
* 17/06/1996  Rob Scott  Code Written                            V1.0
*-------------------------------------------------------------------*
LISTMEM  CSECT
LISTMEM  AMODE 24
LISTMEM  RMODE 24
         BAKR  R14,R0                 linkage stack
         LR    R12,R15                set R12 as base
         USING LISTMEM,R12            address it
         MODID ,                      eyecatcher
         LR    R2,R1                  copy any parms passed
GETWORK  EQU   *
*--------------------------------------------------------------------*
* Get some workarea storage and init to ZEROs. We also load the
* address of IRXEXCOM for later calls.
*--------------------------------------------------------------------*
         STORAGE OBTAIN,              get the workarea storage         X
               LENGTH=WORKLEN,        this much                        X
               ADDR=(R13),            address in r13                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               LOC=BELOW,             below the line                   X
               COND=NO                unconditional
         USING WORKAREA,R13           address workarea
         LR    R14,R13                Copy workarea address
         L     R15,=A(WORKLEN)        Get length of workarea
         XR    R0,R0                  Clear
         XR    R1,R1                  Clear
         MVCL  R14,R0                 Init to ZEROs
         MVC   4(4,R13),=C'F1SA'      set label in savearea
         LOAD  EP=IRXEXCOM            Get address of IRXEXCOM
         ST    R0,AIRXEXCM            Store for later
         MVC   PDSDCB(DCBL),DCBM      Move in model DCB
         MVC   OPENDCB(OPENL),OPENM   Copy in the model macro
         MVC   CLOSDCB(CLOSL),CLOSM   Copy in the model macro
*--------------------------------------------------------------------*
* Init the working storage text unit constants                       *
*--------------------------------------------------------------------*
         MVC   DDNKEY(2),=AL2(DALRTDDN) Text Unit Key
         MVC   DDNNUM(2),=AL2(1)        Number of parms
         MVC   DDNLEN(2),=AL2(8)        Length of parms
         MVC   DSNKEY(2),=AL2(DALDSNAM) Text Unit Key
         MVC   DSNNUM(2),=AL2(1)        Number of parms
         MVC   VOLKEY(2),=AL2(DALVLSER) Text Unit Key
         MVC   VOLNUM(2),=AL2(1)        Number of parms
         MVC   VOLLEN(2),=AL2(6)        Length of parm
GETSHVB  EQU   *
*--------------------------------------------------------------------*
* Create the storage for the REXX SHVB (required by IRXECCOM).
* We reserve 250 bytes for the variable name and 3K for the value
*--------------------------------------------------------------------*
         STORAGE OBTAIN,              get the SHVBLOCK storage         X
               LENGTH=4096,           this much                        X
               ADDR=(R11),            address in r11                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               LOC=ANY,               above the line                   X
               COND=NO                unconditional
         USING SHVBLOCK,R11           address SHVBLOCK
         LA    R4,SHVBLEN(R11)        Point to name buffer
         ST    R4,ASHVNAMA            Store for IRXEXCOM
         MVC   NAMALEN,=F'250'        Set length of name buffer
         LA    R5,256(R4)             Point to value buffer
         ST    R5,ASHVVALA            Store for IRXEXCOM
         MVC   VALALEN,=F'3072'       Set length of value buffer
GETPARMS EQU   *
*--------------------------------------------------------------------*
* Process the parms passed to this REXX function. This will be the
* standard REXX function parameter list.
*--------------------------------------------------------------------*
         USING EFPL,R2                address REXX function parms
         L     R3,EFPLEVAL            Get pointer to Eval_Block
         L     R3,0(R3)               REXX Eval_Block address
         USING EVALBLOCK,R3           Address it
         L     R6,EFPLARG             REXX Argument table
         USING ARGTABLE_ENTRY,R6      Address it
         CLC   0(4,R6),HEXFF          No args ?
         BE    RETURN08               Error
GETDSN   EQU   *
*--------------------------------------------------------------------*
* Get the dataset name passed
*--------------------------------------------------------------------*
         MVC   DATASET(44),BLANKS     Blank out the dataset name
         L     R8,ARGTABLE_ARGSTRING_PTR
         L     R9,ARGTABLE_ARGSTRING_LENGTH
         LTR   R9,R9                  Test arg length
         BZ    RETURN08               ZERO - error
         C     R9,=F'44'              > 44 chars
         BH    RETURN08               Yes - error
         STH   R9,DSNLEN              Store in SVC99 TU
         BCTR  R9,R0                  Minus 1 for execute
         EX    R9,MOVEDSN             Copy the dataset name
GETVOL   EQU   *
*--------------------------------------------------------------------*
* Get any volume serial passed
*--------------------------------------------------------------------*
         MVC   VOLSER(6),BLANKS       Blank out the volser
         LA    R6,8(R6)               Point to next arg
         CLC   0(4,R6),HEXFF          No arg ?
         BE    GETDSCB                No - volume specified
         L     R8,ARGTABLE_ARGSTRING_PTR
         L     R9,ARGTABLE_ARGSTRING_LENGTH
         LTR   R9,R9                  Test arg length
         BZ    GETDSCB                ZERO - no volume
         C     R9,=F'6'               = 6 chars
         BNE   RETURN08               No - error
         MVC   VOLSER(6),0(R8)        Copy volume serial in
GETDSCB  EQU   *
*--------------------------------------------------------------------*
* We now try and locate the dataset in the catalog and then get the
* F1-DSCB to check if it is a PDS.
*--------------------------------------------------------------------*
         TR    DATASET(44),UPPER      Ensure uppercase
         MVC   LOCATE1(CAMNAMEL),CAMNAME
         LA    R15,DATASET            point to dataset name
         ST    R15,LOCATE1+4          store in camlst
         LA    R15,NAMEWORK           point to work area
         ST    R15,LOCATE1+12         store in camlst
         MVC   OBTAIN1(CAMSRCHL),CAMSRCH
         LA    R15,DATASET            point to dataset name
         ST    R15,OBTAIN1+4          store in camlst
         LA    R15,VOLSER             point to volume serial
         ST    R15,OBTAIN1+8          store in camlst
         LA    R15,DSCB1+44           point to dscb
         ST    R15,OBTAIN1+12         store in camlst
         CLI   VOLSER,C' '            blank volser ?
         BNE   OBTAIN                 no - just need obtain
         LOCATE LOCATE1               issue locate macro
         MVC   VOLSER(6),NAMEWORK+6   copy in the volser
OBTAIN   EQU   *
         TR    VOLSER(6),UPPER        Ensure uppercase
         CLC   VOLSER(6),=C'MIGRAT'   Migrated ?
         BE    RETURN02               Yes - cannot process
         OBTAIN OBTAIN1               issue obtain macro
         LTR   R15,R15                test rc
         BNZ   RETURN04               if not zero indicate
         LA    R15,DSCB1              Point to DSCB-1
         USING F1DSCB,R15             Quick addressability
         TM    DS1DSORG,DS1DSGPO      Is it a PDS ?
         BNO   RETURN04               no - ignore it
ALLOCDSN EQU   *
*--------------------------------------------------------------------*
* Dynamically allocate the dataset to a temporary ddname.
*--------------------------------------------------------------------*
         MVC   DDNAME(8),BLANKS       blank out the ddname
         LA    R8,ALLOCRB             point to SVC99 RB
         USING S99RB,R8               address it
         MVI   S99RBLN,20             Set length of RB
         MVI   S99VERB,S99VRBAL       Set verb in RB
         LA    R15,ALLOCTU            Point to text units
         ST    R15,S99TXTPP           Store in RB
         LA    R15,DDNKEY             Point to DDName TU
         ST    R15,ALLOCTU            store in RB
         LA    R15,DSNKEY             Point to DSN TU
         ST    R15,ALLOCTU+4          store in RB
         LA    R15,UNTKEY             Point to Unit TU
         ST    R15,ALLOCTU+8          store in RB
         LA    R15,VOLKEY             Point to Vol TU
         ST    R15,ALLOCTU+12         store in RB
         LA    R15,SHRKEY             Point to SHR TU
         ST    R15,ALLOCTU+16         store in RB
         OI    ALLOCTU+16,X'80'       Indicate last TU
         ST    R8,ALLOCRBP            Store RB Address
         OI    ALLOCRBP,X'80'         Flip high bit
         LA    R1,ALLOCRBP            Point to SVC99 parm list
         DYNALLOC                     call SVC 99
         LTR   R15,R15                test rc
         BZ    ALLOCOK                if 0 - OK
         LA    R1,S99ERROR            point to SVC99 rc+rsn
         LA    R0,4                   set length
         LA    R15,ERRCODE            point to output bytes
         BAL   R10,HEX2CHAR           make it printable
         B     RETURNCC               and tell user
ALLOCOK  EQU   *
*--------------------------------------------------------------------*
* If we get here, we have successfully allocated a PDS to a SYSnnnnn
* DDName. We copy the temporary ddname (returned by SVC99) to the DCB
* in working storage and then process the directory blocks.
*--------------------------------------------------------------------*
         MVC   PDSDCB+40(8),DDNAME    overwrite DDName
LISTBLDL EQU   *
         OPEN  (PDSDCB,(INPUT)),      Open the DCB                     X
               MF=(E,OPENDCB)
         MVC   PCNT,=PL3'0'           Zero the count
DIRLOOP  EQU   *
         GET   PDSDCB,INDIR           Get a directory block
         LA    R15,INDIR              Get address of DIR block
         AH    R15,INDIR              Get number of bytes used
         S     R15,=F'2'              subtract two bytes
         ST    R15,ENDDIR             Store as end address
         LA    R9,INDIR+2             Point to first DIR block
         USING DIR,R9                 address it
DIRBLOOP EQU   *
         CLI   DIRNAME,X'FF'          Last member
         BE    FINISH                 yes - finished
GOTMEMBR EQU   *
         AP    PCNT,=PL3'1'           Add to member count
         MVC   0(16,R4),=CL16'PDS_MEMBER_NAME.'
         MVC   SHVNAML,=F'16'         Set name+length
         MVC   0(8,R5),DIRNAME        Set value
         MVC   SHVVALL,=F'8'          Set value length
         BAL   R10,STEMNAME           Create stem name
         BAL   R10,MAKEVAR            Create variable
NEXTDIRE EQU   *
         XR    R15,R15                Clear
         NI    DIRC,X'1F'             Clear alias indicator
         IC    R15,DIRC               Get number of user words
         SLL   R15,1                  x2 = number of bytes
         LA    R15,12(R15)            Add fixed portion
         AR    R9,R15                 Add to current address
         C     R9,ENDDIR              End of directory block ?
         BNH   DIRBLOOP               No - carry on
NEXTDIR  EQU   *
         B     DIRLOOP                Yes - get next directory
FINISH   EQU   *
*--------------------------------------------------------------------*
* We have finished with the dataset. Close and free it and then
* set up the 'zero' stem values.
*--------------------------------------------------------------------*
         CLOSE (PDSDCB),                                               x
               MF=(E,CLOSDCB)         Use this parm list
         MVC   DDNKEY,=AL2(DALDDNAM)  Overwite DDName Key
         LA    R1,DDNKEY              Point to DDName
         ST    R1,ALLOCTU             Store as Text Unit
         OI    ALLOCTU,X'80'          Indicate last
         MVI   S99VERB,S99VRBUN       Change ALLOC to FREE
         LA    R1,ALLOCRBP            Point to SVC99 parm list
         DYNALLOC                     call SVC 99
         MVC   0(17,R4),=CL17'PDS_MEMBER_NAME.0'
         MVC   SHVNAML,=F'17'         Set length
         UNPK  UCNT,PCNT              Unpack loop count
         OI    UCNT+3,X'F0'           Remove sign
         MVC   0(4,R5),UCNT           Copy value
         MVC   SHVVALL,=F'4'          Set length of value
         BAL   R10,MAKEVAR            Set zero stem value
RETURN00 EQU   *
*--------------------------------------------------------------------*
* Return to the user - all OK
*--------------------------------------------------------------------*
         MVC   EVALBLOCK_EVLEN(4),=F'1' Set length of result
         MVI   EVALBLOCK_EVDATA,C'0'
         BAL   R10,RELSHVB            free the SHVB area
         BAL   R10,RELWORK            free the workarea
         XR    R15,R15                set rc to ZERO
         PR                           return
RETURN02 EQU   *
*--------------------------------------------------------------------*
* Return to the user - dataset is migrated
*--------------------------------------------------------------------*
         MVC   EVALBLOCK_EVLEN(4),=F'1' Set length of result
         MVI   EVALBLOCK_EVDATA,C'2'
         BAL   R10,RELSHVB            free the SHVB area
         BAL   R10,RELWORK            free the workarea
         XR    R15,R15                set rc to ZERO
         PR                           return
RETURN04 EQU   *
*--------------------------------------------------------------------*
* Return to the user - could not find dataset
*--------------------------------------------------------------------*
         MVC   EVALBLOCK_EVLEN(4),=F'1' Set length of result
         MVI   EVALBLOCK_EVDATA,C'4'
         BAL   R10,RELSHVB            free the SHVB area
         BAL   R10,RELWORK            free the workarea
         XR    R15,R15                set rc to ZERO
         PR                           return
RETURN08 EQU   *
*--------------------------------------------------------------------*
* Return to the user - parameter error
*--------------------------------------------------------------------*
         MVC   EVALBLOCK_EVLEN(4),=F'1' Set length of result
         MVI   EVALBLOCK_EVDATA,C'8'
         BAL   R10,RELSHVB            free the SHVB area
         BAL   R10,RELWORK            free the workarea
         XR    R15,R15                set rc to ZERO
         PR                           return
RETURNCC EQU   *
*--------------------------------------------------------------------*
* Return to the user - dynalloc error
*--------------------------------------------------------------------*
         MVC   EVALBLOCK_EVLEN(4),=F'8' Set length of result
         MVC   EVALBLOCK_EVDATA(8),ERRCODE
         BAL   R10,RELSHVB            free the SHVB area
         BAL   R10,RELWORK            free the workarea
         XR    R15,R15                set rc to ZERO
         PR                           return
*
*--------------------------------------------------------------------*
* General Routines
*--------------------------------------------------------------------*
*
MAKEVAR  EQU   *
*--------------------------------------------------------------------*
* Link to IRXEXCOM to create the REXX variable
*--------------------------------------------------------------------*
         LA    R1,EXCOMID             Point to IRXEXCOM id
         ST    R1,AEXCOMP1            Store in parm list
         LA    R1,ZERO                Point to fullword ZERO
         ST    R1,AEXCOMP2            Store in parm list
         ST    R1,AEXCOMP3            Store in parm list
         ST    R11,AEXCOMP4           Store SHVB as parm #4
         LA    R1,ZERO                Point to fullword ZERO
         ST    R1,AEXCOMP5            Store in parm list
         LA    R1,EXCOMRC             Point to return code
         ST    R1,AEXCOMP6            Store in parm list
         OI    AEXCOMP6,X'80'         Indicate end of list
         MVI   SHVCODE,SHVSTORE       Indicate "Set"
         MVC   SHVNAMA,ASHVNAMA       Point to name buffer
         MVC   SHVVALA,ASHVVALA       Point to value buffer
         LA    R1,EXCOMPRM            Point to the parm list
         L     R15,AIRXEXCM           Load address of routine
         BALR  R14,R15                Call it
         BR    R10
*
STEMNAME EQU   *
*-------------------------------------------------------------------*
* Routine to construct a REXX stem name from the core variable
* name plus a packed index count.
*-------------------------------------------------------------------*
         LR    R15,R4                 Point to the name
         A     R15,SHVNAML            add on length of name
         UNPK  UCNT,PCNT              unpack the count
         OI    UCNT+3,X'F0'           get rid of sign
THOUSAND EQU   *
         CLI   UCNT,C'0'              is there a ZERO ?
         BE    HUNDRED                yes - UCNT < 1000
         MVC   0(4,R15),UCNT          add on to name
         L     R15,SHVNAML            load up current length
         A     R15,=F'4'              add four
         ST    R15,SHVNAML            store as new length
         B     STEMDONE
HUNDRED  EQU   *
         CLI   UCNT+1,C'0'            is there a ZERO ?
         BE    TENS                   yes - UCNT < 100
         MVC   0(3,R15),UCNT+1        add on to name
         L     R15,SHVNAML            load up current length
         A     R15,=F'3'              add three
         ST    R15,SHVNAML            store as new length
         B     STEMDONE
TENS     EQU   *
         CLI   UCNT+2,C'0'            is there a ZERO ?
         BE    UNITS                  yes - UCNT < 10
         MVC   0(2,R15),UCNT+2        add on to name
         L     R15,SHVNAML            load up current length
         A     R15,=F'2'              add two
         ST    R15,SHVNAML            store as new length
         B     STEMDONE
UNITS    EQU   *
         MVC   0(1,R15),UCNT+3        add on to name
         L     R15,SHVNAML            load up current length
         LA    R15,1(R15)             add one
         ST    R15,SHVNAML            store as new length
STEMDONE EQU   *
         BR    R10
*
HEX2CHAR EQU   *
*--------------------------------------------------------------------*
* Convert a hex string to EBCDIC
* Registers on entry :
* R0 - Length of input hex bytes
* R1 - Input hex bytes
* R15- Output EBCDIC area
*
* R14 is used as a work register
*
*--------------------------------------------------------------------*
LEFTHALF EQU   *
         XR    R14,R14                Clear
         ICM   R14,B'0001',0(R1)      Load up a byte (000000ab)
         SRL   R14,4                  Remove last 4 bits (0000000a)
LEFTNUM  EQU   *
         CH    R14,=H'9'              00000000 - 00000009 ?
         BH    LEFTLTTR               higher - must be A-F
         AH    R14,=H'240'            xlate to F0-F9
         B     LEFTDONE
LEFTLTTR EQU   *
         AH    R14,=H'183'            xlate to C1-C6
LEFTDONE EQU   *
         STCM  R14,B'0001',0(R15)     Store in output field
         LA    R15,1(R15)             Point to next char
RGHTHALF EQU   *
         XR    R14,R14                Clear
         ICM   R14,B'0001',0(R1)      Load up a byte (000000ab)
         SLL   R14,28                 Remove first 4 bits (b0000000)
         SRL   R14,28                 and reset           (0000000b)
RGHTNUM  EQU   *
         CH    R14,=H'9'              00000000 - 00000009 ?
         BH    RGHTLTTR               higher - must be A-F
         AH    R14,=H'240'            xlate to F0-F9
         B     RGHTDONE
RGHTLTTR EQU   *
         AH    R14,=H'183'            xlate to C1-C6
RGHTDONE EQU   *
         STCM  R14,B'0001',0(R15)     Store in output area
         LA    R15,1(R15)             Point to next char
         LA    R1,1(R1)               Point to next input byte
         BCT   R0,LEFTHALF            Loop for all bytes
         BR    R10                    return
*
RELWORK  EQU   *
*--------------------------------------------------------------------*
* Release workarea storage
*--------------------------------------------------------------------*
         DELETE EP=IRXEXCOM           Delete IRXEXCOM from storage
         STORAGE RELEASE,             release workarea storage         X
               LENGTH=WORKLEN,        this much                        X
               ADDR=(R13),            address in R13                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               COND=NO                unconditional
         BR    R10                    return
*
RELSHVB  EQU   *
*--------------------------------------------------------------------*
* Release SHVB storage
*--------------------------------------------------------------------*
         STORAGE RELEASE,             release SHVB storage             X
               LENGTH=4096,           this much                        X
               ADDR=(R11),            address in R11                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               COND=NO                unconditional
         BR    R10                    return
*
*
*-------------------------------------------------------------------*
* Executed instructions
*-------------------------------------------------------------------*
*
MOVEDSN  MVC   DATASET(0),0(R8)       Copy dataset name
*-------------------------------------------------------------------*
* Constants, Variables and DSECTs
*-------------------------------------------------------------------*
*
         LTORG
EXCOMID  DC    CL8'IRXEXCOM'          IRXEXCOM ID
ZERO     DC    F'0'                   ZERO fullword
HEXFF    DC    X'FFFFFFFF'            high values
BLANKS   DC    44C' '                 Blanks
*
DCBM     DCB   DDNAME=SYSXXXXX,       DCB for PDS directory            x
               RECFM=F,                                                x
               DSORG=PS,                                               x
               LRECL=256,                                              x
               BLKSIZE=256,                                            x
               MACRF=GM,                                               x
               EODAD=FINISH
DCBL     EQU   *-DCBM                 Length of DCB
OPENM    OPEN  (,),MF=L               Model macro for OPEN
OPENL    EQU   *-OPENM                Length of macro
CLOSM    CLOSE (,),MF=L               Model macro for CLOSE
CLOSL    EQU   *-CLOSM                Length of macro
CAMNAME  CAMLST NAME,ZERO,,ZERO       Model macro for LOCATE
CAMNAMEL EQU   *-CAMNAME              Length of macro
CAMSRCH  CAMLST SEARCH,ZERO,ZERO,ZERO Model macro for OBTAIN
CAMSRCHL EQU   *-CAMSRCH              Length of macro
*
         DS    0F
SHRKEY   DC    AL2(DALSTATS)          Key for DISP
SHRNUM   DC    AL2(1)                 #
SHRLEN   DC    AL2(1)                 Length
SHR      DC    X'08'                  SHR
*
         DS    0F
UNTKEY   DC    AL2(DALUNIT)           Key for UNIT
UNTNUM   DC    AL2(1)                 #
UNTLEN   DC    AL2(8)                 Length
UNIT     DC    CL8'SYSALLDA'          UNIT=SYSALLDA
*
UPPER    DS    0CL256
         DC    X'000102030405060708090A0B0C0D0E0F'
         DC    X'101112131415161718191A1B1C1D1E1F'
         DC    X'202122232425262728292A2B2C2D2E2F'
         DC    X'303132333435363738393A3B3C3D3E3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'
         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'
         DC    X'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
*
WORKAREA DSECT
SAVEAREA DS    18F                    save area
AIRXEXCM DS    F                      address of IRXEXCOM
ASHVNAMA DS    F                      address of SHVB name buffer
ASHVVALA DS    F                      address of SHVB value buffer
NAMALEN  DS    F                      length of SHVB name buffer
VALALEN  DS    F                      length of SHVB value buffer
EXCOMRC  DS    F                      Return code from IRXEXCOM
EXCOMPRM DS    0F                     Parm list for IRXEXCOM
AEXCOMP1 DS    F                      ---> IRXEXCOM ID
AEXCOMP2 DS    F                      ---> 0
AEXCOMP3 DS    F                      ---> 0
AEXCOMP4 DS    F                      ---> SHVBLOCK
AEXCOMP5 DS    F                      ---> ENVBLOCK
AEXCOMP6 DS    F                      ---> Return Code
         DS    0F
UCNT     DS    F                      Unpack field
PCNT     DS    PL3                    packed count field
         DS    0F
UWORK    DS    F                      unpack work
         DS    0D
PWORK    DS    D                      packed work
         DS    0F
ALLOCRBP DS    F                      Address of ALLOC RB
ALLOCRB  DS    CL20                   Space for ALLOC SVC99 RB
         DS    0F
ALLOCTU  DS    5F                     Space for ALLOC SVC99 TU ptrs
* Dataset Text Unit for DDname Allocation (Generate SYSxxxxx)
DDNKEY   DS    XL2                    SVC99 Key for ddname
DDNNUM   DS    XL2                    SVC99 Number
DDNLEN   DS    XL2                    SVC99 Length of ddname
DDNAME   DS    CL8                    DD Name
* Dataset Text Unit for Dynamic Allocation
DSNKEY   DS    XL2                    SVC99 Key for dataset
DSNNUM   DS    XL2                    SVC99 Number
DSNLEN   DS    XL2                    SVC99 Length of dataset
DATASET  DS    CL44                   Dataset Name
* Volume Serial Text Unit for Dynamic Allocation
VOLKEY   DS    XL2                    SVC99 Key for volser
VOLNUM   DS    XL2                    SVC99 Number
VOLLEN   DS    XL2                    SVC99 Length of volser
VOLSER   DS    CL6                    Volume
*
PDSDCB   DS    CL(DCBL)               Area for DCB
OPENDCB  DS    CL(OPENL)              Area for OPEN
CLOSDCB  DS    CL(CLOSL)              Area for CLOSE
DSCB1    DS    CL140                  Area for F1-DSCB
         DS    0F
LOCATE1  DS    CL(CAMNAMEL)           Area for LOCATE
         DS    0F
OBTAIN1  DS    CL(CAMSRCHL)           Area for OBTAIN
         DS    0F
ERRCODE  DS    CL8
ENDDIR   DS    F                      End address of dir block
NAMEWORK DS    CL256                  Work area for LOCATE/OBTAIN
INDIR    DS    CL256                  Directory block input
WORKLEN  EQU   *-WORKAREA
*
* Directory Block mapping
*
DIR      DSECT
DIRNAME  DS    CL8                    Member name
DIRTTR   DS    XL3                    TTR
DIRC     DS    X
DIRUDAT  DS    0C
*
F1DSCB   DSECT                        F1-DSCB mapping
         IECSDSL1 (1)
*
         IRXEFPL                      REXX External Function
         IRXEVALB                     REXX Evaluation Block
         IRXSHVB                      REXX Shared Variable Block
         IRXARGTB DECLARE=YES         REXX Shared Variable Block
         IEFZB4D0
         IEFZB4D2
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
